####################
# Install Apache 2 #
####################

###################
# Requirements:   #
# * gcc-c++       #
###################

- include: apr.yml
- include: apr-util.yml
- include: pcre.yml

# Detect httpd
- stat: path={{STOW_PATH}}/../bin/httpd
  register: httpd_bin
  changed_when: httpd_bin.stat.exists == False

# Upload & extract source
- { include: upload_src.yml, package: "{{src.httpd}}", pkg_check: "{{httpd_bin}}" }

- name: Install httpd
  when: httpd_bin.stat.exists == False
  shell:
    "{{src_bash}}
    cd {{SRC_PATH}}/{{src_folder.stdout}};
    ./configure --prefix={{STOW_PATH}}/{{src_folder.stdout}};
    make;
    make install prefix={{STOW_PATH}}/{{src_folder.stdout}};
    cd {{STOW_PATH}};
    stow {{src_folder.stdout}};
    creates={{STOW_PATH}}/../bin/httpd;"
  register: httpd_install
  changed_when: httpd_install.rc != 0 or httpd_bin.stat.exists == False

# Verify httpd installed
- shell: "{{src_bash}} httpd -v"
  register: httpd_version
  changed_when: httpd_version.rc != 0 or httpd_bin.stat.exists == False

- name: Display httpd version
  debug: msg="{{httpd_version.stdout}}"
  failed_when: '"{{src.httpd.ver}}" not in httpd_version.stdout'

# Create certificates if they don't exist
- name: Create certs directory
  when: httpd.https.enabled == True
  file: path={{httpd.https.ssl.certs_path}} state=directory mode=755

- name: Create CA directory
  when: httpd.https.enabled == True
  file: path={{httpd.https.ssl.CA_path}} state=directory mode=755

- name: Touch cert password file (if it doesn't exist)
  when: httpd.https.enabled == True
  command: "touch {{httpd.https.ssl.server_pwd}} creates={{httpd.https.ssl.server_pwd}}"

- name: Create self-signed SSL certs
  when: httpd.https.enabled == True
  command: "openssl req -new -nodes -x509 -subj '/C={{httpd.https.ssl.csr.country}}/ST={{httpd.https.ssl.csr.state}}/L={{httpd.https.ssl.csr.city}}/O={{httpd.https.ssl.csr.office}}/CN={{httpd.https.ssl.csr.common_name}}' -days 365 -keyout {{httpd.https.ssl.server_key}} -out {{httpd.https.ssl.server_crt}} -extensions v3_ca creates={{httpd.https.ssl.server_crt}}"

- name: Symlink cert file
  when: httpd.https.enabled == True
  command: "ln -s {{httpd.https.ssl.certs_path}}/{{ansible_fqdn}}.crt {{httpd.https.ssl.server_crt}} creates={{httpd.https.ssl.server_crt}}"

- name: Symlink cert key
  when: httpd.https.enabled == True
  command: "ln -s {{httpd.https.ssl.certs_path}}/{{ansible_fqdn}}.key {{httpd.https.ssl.server_key}} creates={{httpd.https.ssl.server_key}}"

- name: Default CA bundle file
  when: httpd.https.enabled == True and httpd.https.ssl.CA_roots.haxx == True
  command: "wget http://curl.haxx.se/ca/cacert.pem -O {{httpd.https.ssl.CA_path}}/ca-bundle.haxx creates={{httpd.https.ssl.CA_path}}/ca-bundle.haxx"

- name: CACert CA bundle file
  when: httpd.https.enabled == True and httpd.https.ssl.CA_roots.cacert == True
  command: "wget http://www.cacert.org/certs/root.txt -O {{httpd.https.ssl.CA_path}}/ca-bundle.cacert creates={{httpd.https.ssl.CA_path}}/ca-bundle.cacert"

- name: Merge CA Bundle files
  when: httpd.https.enabled == True
  shell: "cat {{httpd.https.ssl.CA_path}}/ca-bundle.* >> {{httpd.https.ssl.CA_cert}} creates={{httpd.https.ssl.CA_cert}}"

- name: Symlink CA bundle to OpenSSL config location
  when: httpd.https.enabled == True
  command: "ln -s {{httpd.https.ssl.CA_cert}} {{STOW_PATH}}/../ssl/cacert.pem creates={{STOW_PATH}}/../ssl/cacert.pem"

# SSL Configuration
- name: Create passphrase echo script
  template: src=passphrase.sh.j2 dest={{httpd.https.ssl.certs_path}}/passphrase.sh mode=500

- name: Symlink server-ca.crt to CA-bundle.crt
  when: httpd.https.enabled == True
  file: src={{httpd.https.ssl.CA_cert}} dest={{httpd.paths.server_ca}} state=link force=yes

- name: Replace SSL configuration file with populated version
  template: src=httpd-ssl.conf.j2 dest={{httpd.paths.ssl_conf}} backup=yes

- name: Enable httpd-ssl.conf
  when: httpd.https.enabled == True
  lineinfile: >
    dest={{httpd.paths.httpd_conf}}
    state=present
    regexp='^#?Include {{httpd.paths.ssl_conf}}$'
    line="Include {{httpd.paths.ssl_conf}}"
#" #TODO: Remove author's hack for vim syntax sanity

- name: Enable SSLEngine
  when: httpd.https.enabled == True
  lineinfile:
    dest={{httpd.paths.httpd_conf}}
    backrefs=yes
    state=present
    regexp='^#?LoadModule ssl_module modules/mod_ssl.so$'
    line="LoadModule ssl_module modules/mod_ssl.so"
#" #TODO: Remove author's hack for vim syntax sanity

- name: Enable SHMCB
  when: httpd.https.enabled == True
  lineinfile:
    dest={{httpd.paths.httpd_conf}}
    backrefs=yes
    state=present
    regexp='^#?LoadModule socache_shmcb_module modules/mod_socache_shmcb.so$'
    line="LoadModule socache_shmcb_module modules/mod_socache_shmcb.so"
#" #TODO: Remove author's hack for vim syntax sanity

# Default httpd & virtualhost includes
- name: Create sites-available & sites-enabled directories
  file: path={{item}} state=directory
  with_items:
    - "{{httpd.paths.sites_available}}"
    - "{{httpd.paths.sites_enabled}}"

- name: Setup Default Port in httpd.conf
  lineinfile:
    dest={{httpd.paths.httpd_conf}}
    backrefs=yes
    state=present
    regexp="^Listen 80$"
    line="Listen {{httpd.port}}"
#" #TODO: Remove author's hack for vim syntax sanity

- name: Setup vhosts Include
  lineinfile:
    dest={{httpd.paths.httpd_conf}}
    insertafter=EOF
    state=present
    regexp="^Include {{httpd.paths.sites_enabled}}$"
    line="Include {{httpd.paths.sites_enabled}}"
#" #TODO: Remove author's hack for vim syntax sanity
