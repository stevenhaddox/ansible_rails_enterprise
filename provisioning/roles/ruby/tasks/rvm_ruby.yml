- name: Create {{HOME.stdout}}/.gemrc
  template: src=gemrc.j2 dest={{HOME.stdout}}/.gemrc

# Install Specified Ruby
- stat: path={{HOME.stdout}}/.rvm/rubies/{{ruby.version}}/bin/ruby
  register: ruby_bin

- name: Install Ruby
  when: ruby_bin.stat.exists == False
  shell: bash -l -c "rvm install {{ruby.version}} --with-opt-dir={{HOME.stdout}}/.rvm/usr --verify-downloads 1" creates={{HOME.stdout}}/.rvm/rubies/{{ruby.version}}
  register: ruby_installed

- name: Set Default Ruby
  when: ruby_bin.stat.exists == False
  # Use bash -l -c to ensure RVM loads as a function to set default Ruby
  shell: bash -l -c "rvm use {{ruby.version}} --default"
  register: default_rvm_ruby
  changed_when: default_rvm_ruby.rc != 0

- shell: bash -l -c "ruby --version"
  register: ruby_version
  changed_when: ruby_version.rc != 0

# Display Ruby Version
- name: Display ruby version
  debug: msg="{{ruby_version.stdout}}"

- name: Remove Gem Sources
  when: ruby.gem_sources.delete
  shell: bash -l -c "gem sources -r {{item}}"
  with_items: ruby.gem_sources.delete
  register: gem_src_del
  changed_when: "'not present' not in gem_src_del.stdout or gem_src_del|failed"

- shell: bash -l -c "bundle --version"
  register: bundler_test
  changed_when: False
  ignore_errors: yes

- name: Install Bundler
  when: bundler_test|failed
  shell: bash -l -c "gem install bundler"
  register: bundler_installed
  changed_when: bundler_installed.rc != 0
  ignore_errors: true

- shell: bash -l -c "bundle --version"
  register: bundler_version
  changed_when: bundler_version.rc != 0

- name: Display Bundler version
  debug: msg={{bundler_version.stdout_lines}}
